plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}
architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath

    forge {
        convertAccessWideners = true
        extraAccessWideners.add loom.accessWidenerPath.get().asFile.name

        mixinConfig "tardis_refined-common.mixins.json"
        mixinConfig "tardis_refined.mixins.json"

        dataGen {
            mod "${mod_id}"
        }

    }

    launches {
        data {
            arg "--existing", project(":common").file("src/main/resources/").absolutePath
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${minecraft_version}-${forge_version}"


    modCompileOnly "curse.maven:worldedit-225608:${world_edit_version}"
    modCompileOnly "curse.maven:structure-expansion-398430:${structure_expansion_version}"

    modCompileOnly "curse.maven:configured-457570:${configured_version}"
    modCompileOnly "curse.maven:jei-238222:${jei_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

def resourceTargets = ["META-INF/mods.toml", "pack.mcmeta"]
def intoTargets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
def replaceProperties = [mod_id: mod_id, mod_name: mod_name, mod_version: mod_version,
                         mod_authors: mod_authors, credits:credits, mod_description: mod_description,
                         display_url:display_url, logo_file:logo_file,
                         issue_tracker_url: issue_tracker_url,
                         // update_json_url: update_json_url,
                         license: license,
                         forge_version_range: forge_version_range, forge_minecraft_version_range: forge_minecraft_version_range,
                         forge_loader_version_range: forge_loader_version_range,
                         pack_format: pack_format,
                         forge_resource_pack_format: forge_resource_pack_format,
                         forge_data_pack_format: forge_data_pack_format
                         // ,display_test_type: display_test_type
]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put 'project', project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }

    intoTargets.each { target ->
        if (file(target).exists()) {
            copy {
                from(sourceSets.main.resources) {
                    include resourceTargets
                    expand replaceProperties
                }
                into target
            }
        }
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "forge"
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}